plugins {
    alias(libs.plugins.forge)
}

minecraft {
    mappings channel: "official", version: "${libs.versions.minecraftVersion.get()}"
    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "error"
        }

        client {
            taskName "runFTForgeClient"
            workingDirectory project.file("./run/client")
        }

        server {
            taskName "runFTForgeServer"
            workingDirectory project.file("./run/server")
            args "--nogui"
        }

        gameTestServer {
            taskName "runFTForgeTestServer"
            workingDirectory project.file("./run/test")
            property "forge.enabledGameTestNamespaces", "fallingtree"
        }

        data {
            taskName "runFTForgeData"
            workingDirectory project.file("./run/data")
            args '--mod', 'fallingtree', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft(libs.forge)
    library(project(":common"))

    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${libs.versions.clothConfigVersion.get()}"))
}

ext {
    minecraftVersion = libs.versions.minecraftVersion.get()
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from "src/main/resources", "../common/src/main/resources"

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand project.properties
    }
}

jar.finalizedBy('reobfJar')
